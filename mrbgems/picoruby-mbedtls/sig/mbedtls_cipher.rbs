module MbedTLS
  class Cipher
    type cipher_t = :aes_128_cbc
                    | :aes_192_cbc
                    | :aes_256_cbc
                    | :aes_128_gcm
                    | :aes_192_gcm
                    | :aes_256_gcm
    SUPPORTED_CIPHERS:    Hash[cipher_t, Integer]
    KEY_LENGTHS:          Hash[cipher_t, Integer]
    IV_LENGTHS:           Hash[Integer, Integer]
    type operation_t = :encrypt | :decrypt
    SUPPORTED_OPERATIONS: Hash[operation_t, Integer]

    @iv_set: bool | nil
    @cipher_key: Integer

    def self.new: (cipher_t cipher_suite, String key, operation_t operation) -> MbedTLS::Cipher
    private def self._init_ctx: (Integer, String, Integer) -> MbedTLS::Cipher
    def set_iv: (String) -> MbedTLS::Cipher
    private def _set_iv: (String) -> MbedTLS::Cipher
    def update: (String input) -> String
    def update_ad: (String input) -> MbedTLS::Cipher
    def finish: () -> String
    def write_tag: () -> String
    def check_tag: (String tag) -> bool
  end
end
