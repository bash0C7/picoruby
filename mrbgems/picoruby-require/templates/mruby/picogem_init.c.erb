#include <mruby.h>
#include <mruby/proc.h>
#include <mruby/string.h>
#include <mruby/data.h>
#include <mruby/variable.h>
#include <mruby/irep.h>

<% picogems.each do |_require_name, v| %>
#include "<%= v[:mrbfile] %>"
<% end %>

// Forward declarations for gem initializers
<% picogems.each do |_require_name, v| %>
<% if v[:initializer] != "NULL" %>
void <%= v[:initializer] %>(mrb_state *mrb);
<% end %>
<% end %>

typedef struct picogems {
  const char *name;
  const uint8_t *mrb;
  void (*initializer)(mrb_state *mrb);
  mrb_bool required;
} picogems;

static picogems prebuilt_gems[] = {
<% picogems.each do |require_name, v| %>
  <% name = File.basename(v[:mrbfile], ".c") %>
  {"<%= require_name %>", <%= name.gsub('-', '_') %>, <%= v[:initializer] %>, FALSE},
<% end %>
  {NULL, NULL, NULL, TRUE} /* sentinel */
};

static int
gem_index(const char *name)
{
  if (!name) return -1;
  for (int i = 0; ; i++) {
    if (prebuilt_gems[i].name == NULL) {
      return -1;
    } else if (strcmp(name, prebuilt_gems[i].name) == 0) {
      return i;
    }
  }
}

static mrb_value
c_extern(mrb_state *mrb, mrb_value self)
{
  mrb_value name_v, force_v;
  mrb_get_args(mrb, "S|b", &name_v, &force_v);
  const char *name = mrb_string_value_cstr(mrb, &name_v);
  int i = gem_index(name);
  if (i < 0) {
    return mrb_nil_value();
  }
  mrb_bool force = mrb_bool(force_v);
  if (force || !prebuilt_gems[i].required) {
    if (prebuilt_gems[i].initializer) {
      prebuilt_gems[i].initializer(mrb);
    }
    mrb_bool state = mrb_gc_arena_save(mrb);
    mrb_value proc_val = mrb_load_irep(mrb, prebuilt_gems[i].mrb);
    mrb_yield_with_class(mrb, proc_val, 0, NULL, mrb_top_self(mrb), mrb->object_class);
    mrb_gc_arena_restore(mrb, state);
    if (mrb->exc) {
      return mrb_nil_value();
    }
    prebuilt_gems[i].required = TRUE;
    return mrb_true_value();
  } else {
    return mrb_false_value();
  }
}

void
mrb_picoruby_require_gem_init(mrb_state *mrb)
{
  mrb_define_method(mrb, mrb->kernel_module, "extern", c_extern, MRB_ARGS_ARG(1, 1));
  mrb_funcall(mrb, mrb_top_self(mrb), "extern", 1, mrb_str_new_cstr(mrb, "require"));
  mrb_funcall(mrb, mrb_top_self(mrb), "extern", 1, mrb_str_new_cstr(mrb, "io"));
}

void
mrb_picoruby_require_gem_final(mrb_state *mrb)
{
}
